git rm --cached 파일이름 ->unstage

staging에 올려둔 파일을 working directory에서 삭제를 한 경우

git add * 한 다음에 git status를 확인하면

삭제된 파일이 나타나는데

git add . 한 다음에 git status를 하면 모든 파일이 추가된다.


-> git add . 과 git add * 의 차이점을 알아두자
=========================

git에 포함하지 않고 싶을때

git ignore

echo *.log > .gitignore

build/.log <빌드 폴더안에 log 다 무시

========================
Staging Area와 working directory 변경점 알아보기


git diff 달라진점 비교

이전버전 (commit의 전 버전 또는 staging area에 올라간거)
a와 b 비교

index는 git의 파일들을 비교 할때 사용하는 것


git diff --staged (스테이징과 비교)
git diff --cached (staged와 동의어)

git difftool -> vscode로 실행여부를 물어봄
git difftool --staged

========================

commit은 버전을 만드는 것이다.
Git repository로 옮겨주는 역할

Title을 작성하고 Description을 작성하는 방식

git commit -m "메시지" (간단히 커밋)
git commit -am "" 모든 파일들을 메시지와 함께 함
(working directory와 Staging에 있는것들)

========================
git에서 제공하는 git rm을 이용하면 (<-> rm 삭제)
(추가적으로 mv도 똑같음)
staging area에 자동으로 포함됨


========================
git log

git log -p (변경된 것들 확인)
git log --oneline (해쉬코드와 commit 메시지 확인)

HEAD란?
git에서 commit을 하나 해나가면 포인터가 커밋을 가르킴

a<-b<-c<-d(HEAD)

head~1 을하면 현재 HEAD의 전 버전 c
head~2 는 b버전

 이렇게 만들어진 commit은 원할 때 돌아가기 가능
git checkout (해쉬코드)

========================
git log --pretty=online

우리가 원하는 방식으로 포맷 만들기가 가능

사용가능한 포맷은 git book에서 확인 가능

git checkout fix
git log --oneline --graph --all (master 브런치보기)


git log로 history를 검사하고 원하는 내용을 검색할 수 있음
git log -3 최근 커밋 3개 보기

git log --oneline -3 
git log --author="" -> ""안에 커밋기록 보기
git log --before="2020-09-08" ->9월 8일 이전것 보기

git log --grep="project" -> "project"가 포함된 커밋

git log -S "about" -p
-> 코드 내용안에 about 찾기

git log about.txt (about 파일에 해당하는 커밋)
git log -p about.txt (상세히 보기)
git log -s about.txt (간단한 보기)


git log HEAD


git show 해쉬코드
특정 커밋의 상세보기 (해쉬코드 복붙)


git show 해쉬코드:user_repository.txt
원하는 커밋에서 해당 파일에 해당하는 내용만 확인

git diff 해쉬코드 해쉬코드
->두가지 커밋을 비교 할 수 있음

git diff 해쉬코드 해쉬코드 파일명
->두가지 커밋에서 파일명에 대한 내역 비교하기


----------------------------------------------------
git tag (log가 길어지거나 history가 많아지면 북마크 할때)

특정한 commit을 tag함으로써 원하는 곳으로 전환 가능

semantic versioning 시스템
(major , minor , fix)
v2.0.0

major는 전체적인 업데이트 발생 시 증가
minor는 커다란 기능 중 조그만한 기능이 추가, 업뎃
fix는 기존에 존재하는 기능에서 오류, 성능 개선시

-> 얼마나 의미있고 일관적이게 사용이 중요함

----------------------------------------------------
태그

git tag "원하는 문자열 작성" 해쉬코드

태그에 상세하게 작성하고 싶을때 쓰는 옵션

git tag "문자열 작성" 해쉬코드 -a -m "Release note"
a는 annotate의 약자인데
m은 메시지 작성

git show "태그명" 을 하면
태그에 작성된 메시지를 확인 할 수 있음


git tag -> 모든 태그 확인
git tag -l "" ->""안에 문자열 확인
git tag -d 태그명 (""없음) 태그 삭제

이렇게 만들어진 태그들은 
git checkout 태그명으로 체크아웃 가능



브랜치 생성 후 태그 만들기
git checkout -b testing 태그명


내가 만든 태그를 푸시하고 싶으면

git push origin 태그명
git push origin --tags 모든태그 푸시
git push origin --delete 태그명 (특정 태그 삭제)